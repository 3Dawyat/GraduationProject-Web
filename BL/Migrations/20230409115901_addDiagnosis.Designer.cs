// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pharmacy_DomainModels.Models.DB_Models;

#nullable disable

namespace BL.Migrations
{
    [DbContext(typeof(PharmacyContext))]
    [Migration("20230409115901_addDiagnosis")]
    partial class addDiagnosis
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.CustomModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.EmptyDataResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SPCustomerBalanceResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SPDelegatesReportBetweenDateResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SPDelegatesReportBetweenShiftsResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SPDelegatesReportWithIdBetweenDateResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SPDelegatesReportWithIdResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SpGetCustomerBalanceResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SPGetSaleItemBetweenShiftsResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SPGetSaleItemInSheftBetweenDateAndUserIdResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SPGetSaleItemInSheftBetweenDateResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SPGetSaleItemInSheftByIdResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SPGetSaleItemInSheftByUserIdResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SpGetSupplierBalanceResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.SpProfitAndLosesResult", b =>
                {
                    b.ToView(null);
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbAuthorization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Authorized")
                        .HasColumnType("bit");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<string>("JopId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.ToTable("TbAuthorization");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TbCategories");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbCompanyInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Country")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImageName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("Pic")
                        .HasColumnType("image");

                    b.Property<string>("TaxRecord")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WebSite")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WorkField")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TbCompanyInformation");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbCustomers", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<decimal?>("CreditLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TbCustomers");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbDelivryMen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TbDelivryMen");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbExpenses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TbExpenses");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbExpensesPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Payment")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("SafeId")
                        .HasColumnType("int");

                    b.Property<int?>("SheftId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("SafeId");

                    b.HasIndex("SheftId");

                    b.ToTable("TbExpensesPayment");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbForms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("Authorized")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("ButtonName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ButtonType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TbForms");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbGroups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("TbGroups");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbItemProperties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("TbItemProperties");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ActiveIngredient")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Composition")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Dosage")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ImageName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Pamphlet")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("TbItems");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbItemUnits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Barcode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PuchasePrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("SalesPrice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitsNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("UnitId");

                    b.ToTable("TbItemUnits");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPrinterSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("TbPrinterSettings");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPurchaseInvoiceItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("ItemUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Total")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(38,4)")
                        .HasComputedColumnSql("([Qty]*[PurchasePrice]-[Discount])", false);

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemUnitId");

                    b.ToTable("TbPurchaseInvoiceItems");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPurchaseInvoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Cash")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime?>("CollectionDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Later")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(19,0)")
                        .HasComputedColumnSql("([Total]-[Cash])", false);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RealDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SafeId")
                        .HasColumnType("int");

                    b.Property<int>("SheftId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SheftId");

                    b.HasIndex("StoreId");

                    b.HasIndex("SupplierId");

                    b.ToTable("TbPurchaseInvoices");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPurchaseReturnsDitails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ItemUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ReturnId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Total")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(37,4)")
                        .HasComputedColumnSql("([Qty]*[SalesPrice])", true);

                    b.HasKey("Id");

                    b.HasIndex("ItemUnitId");

                    b.HasIndex("ReturnId");

                    b.ToTable("TbPurchaseReturnsDitails");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPurchasesReturns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("InvId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SafeId")
                        .HasColumnType("int");

                    b.Property<int?>("SheftId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InvId");

                    b.ToTable("TbPurchasesReturns");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSafes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TbSafes");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSalesInvoiceItems", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ItemUnitId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Total")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(38,4)")
                        .HasComputedColumnSql("([Qty]*[SalesPrice]-[Discount])", true);

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("ItemUnitId");

                    b.ToTable("TbSalesInvoiceItems");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSalesInvoices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("BloodPressure")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BodyTempreature")
                        .HasColumnType("int");

                    b.Property<decimal?>("Cash")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DelivryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DelivryManId")
                        .HasColumnType("int");

                    b.Property<int>("Diabites")
                        .HasColumnType("int");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Later")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(20,2)")
                        .HasComputedColumnSql("([Total]-([Cash]+[Discount]))", false);

                    b.Property<DateTime?>("NextVisit")
                        .HasColumnType("datetime");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RealeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SafeId")
                        .HasColumnType("int");

                    b.Property<int?>("SheftId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SheftId");

                    b.ToTable("TbSalesInvoices");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSalesReturns", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("InvId")
                        .HasColumnType("int");

                    b.Property<string>("InvType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SafeId")
                        .HasColumnType("int");

                    b.Property<int?>("SheftId")
                        .HasColumnType("int");

                    b.Property<int?>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal?>("Total")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("InvId");

                    b.ToTable("TbSalesReturns");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSalesReturnsDitails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ItemUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ReturnId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Total")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(37,4)")
                        .HasComputedColumnSql("([Qty]*[SalesPrice])", true);

                    b.HasKey("Id");

                    b.HasIndex("ItemUnitId");

                    b.HasIndex("ReturnId");

                    b.ToTable("TbSalesReturnsDitails");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbShifts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CloseDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("CloseUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("OpenDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("OpenUserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal?>("OpeningBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasDefaultValueSql("((0))");

                    b.Property<decimal?>("SafeBalance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,0)")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SafeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SafeId");

                    b.ToTable("TbShifts");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbStockTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SafeFromId")
                        .HasColumnType("int");

                    b.Property<int?>("SafeToId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SafeFromId");

                    b.HasIndex("SafeToId");

                    b.ToTable("TbStockTransactions");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbStockWithdrawAndDeposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("TbStockWithdrawAndDeposit");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbStores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TbStores");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbStoresTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdStoreFrom")
                        .HasColumnType("int");

                    b.Property<int?>("IdStoreTo")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("userId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("IdStoreFrom");

                    b.HasIndex("IdStoreTo");

                    b.ToTable("TbStoresTransaction");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbStoreTransactionDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ItemUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemUnitId");

                    b.HasIndex("TransactionId");

                    b.ToTable("TbStoreTransactionDetails");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSuppliers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TbSuppliers");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CustId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsIncomming")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("SafeId")
                        .HasColumnType("int");

                    b.Property<int?>("SheftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("CustId");

                    b.HasIndex("SafeId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("TbTransaction");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbTransactionTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TbTransactionTypes");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbUnits", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("TbUnits");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwAuthorizationWithFormName", b =>
                {
                    b.Property<bool>("Authorized")
                        .HasColumnType("bit");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("JopId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.ToView("VwAuthorizationWithFormName");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwAuthorizationWithNames", b =>
                {
                    b.Property<bool>("Authorized")
                        .HasColumnType("bit");

                    b.Property<string>("ButtonName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ButtonType")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("JopId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.ToView("VwAuthorizationWithNames");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwCasherItemsWithUnits", b =>
                {
                    b.Property<string>("Barcode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasMaxLength(451)
                        .HasColumnType("nvarchar(451)");

                    b.Property<int>("ItemUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PuchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitsNumber")
                        .HasColumnType("int");

                    b.ToView("VwCasherItemsWithUnits");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwCustomerLaterInShift", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SafeId")
                        .HasColumnType("int");

                    b.Property<int?>("SheftId")
                        .HasColumnType("int");

                    b.Property<decimal?>("later")
                        .HasColumnType("decimal(38,2)");

                    b.ToView("VwCustomerLaterInShift");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwCustomersAccountStatement", b =>
                {
                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(3,2)");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(20,2)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Debt")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("customerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("isInvoice")
                        .HasColumnType("bit");

                    b.ToView("VwCustomersAccountStatement");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwCustomersBalance", b =>
                {
                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Credit")
                        .HasColumnType("decimal(38,2)");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Debt")
                        .HasColumnType("decimal(38,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("balance")
                        .HasColumnType("decimal(38,2)");

                    b.Property<string>("customerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("invCount")
                        .HasColumnType("int");

                    b.ToView("VwCustomersBalance");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwCustomersTransactions", b =>
                {
                    b.Property<int?>("CustId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Safe")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SheftId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToView("VwCustomersTransactions");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwExpensesReport", b =>
                {
                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("ExpensesId")
                        .HasColumnType("int");

                    b.Property<string>("ExpensesName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Payment")
                        .HasColumnType("decimal(18,0)");

                    b.Property<int?>("SafeId")
                        .HasColumnType("int");

                    b.Property<string>("SafeName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SheftId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToView("VwExpensesReport");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwItemsWithUnits", b =>
                {
                    b.Property<string>("Barcode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("ItemName")
                        .HasMaxLength(451)
                        .HasColumnType("nvarchar(451)");

                    b.Property<int>("ItemUnitId")
                        .HasColumnType("int");

                    b.Property<decimal?>("PuchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SalesPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitsNumber")
                        .HasColumnType("int");

                    b.ToView("VwItemsWithUnits");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwSafesBalance", b =>
                {
                    b.Property<decimal?>("AllCommingMony")
                        .HasColumnType("numeric(38,2)");

                    b.Property<decimal?>("AllCustomerPayment")
                        .HasColumnType("numeric(38,0)");

                    b.Property<decimal?>("AllDeposit")
                        .HasColumnType("numeric(38,2)");

                    b.Property<decimal?>("AllExpenses")
                        .HasColumnType("numeric(38,0)");

                    b.Property<decimal?>("AllMonyIn")
                        .HasColumnType("numeric(38,0)");

                    b.Property<decimal?>("AllMonyOut")
                        .HasColumnType("numeric(38,0)");

                    b.Property<decimal?>("AllOutMony")
                        .HasColumnType("numeric(38,2)");

                    b.Property<decimal?>("AllPurchases")
                        .HasColumnType("numeric(38,0)");

                    b.Property<decimal?>("AllPurchasesReturns")
                        .HasColumnType("numeric(38,2)");

                    b.Property<decimal?>("AllSales")
                        .HasColumnType("decimal(38,2)");

                    b.Property<decimal?>("AllSalesReturns")
                        .HasColumnType("numeric(38,2)");

                    b.Property<decimal?>("AllSupplierPayments")
                        .HasColumnType("numeric(38,0)");

                    b.Property<decimal?>("AllWithdrawal")
                        .HasColumnType("numeric(38,2)");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("numeric(38,0)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("OpeningBalances")
                        .HasColumnType("numeric(38,0)");

                    b.ToView("VwSafesBalance");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwSafesMoves", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MoveDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("SafeId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(20,2)");

                    b.ToView("VwSafesMoves");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwStockTransactionsReport", b =>
                {
                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("From")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("To")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToView("VwStockTransactionsReport");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwStockWithdrawAndDeposit", b =>
                {
                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SafeName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToView("VwStockWithdrawAndDeposit");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwStoresTransactionHeads", b =>
                {
                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("From")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("To")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToView("VwStoresTransactionHeads");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwSupplierInvoices", b =>
                {
                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int?>("invCount")
                        .HasColumnType("int");

                    b.ToView("VwSupplierInvoices");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.VwSuppliersTransactions", b =>
                {
                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Qty")
                        .HasColumnType("decimal(18,0)");

                    b.Property<string>("Safe")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SheftId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.ToView("VwSuppliersTransactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.CustomModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.CustomModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.CustomModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.CustomModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.CustomModels.ApplicationUser", b =>
                {
                    b.OwnsMany("BesnesLogic.Models.CustomModels.RefreshToken", "RefreshToken", b1 =>
                        {
                            b1.Property<string>("ApplicationUserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"), 1L, 1);

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApplicationUserId", "Id");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbAuthorization", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbForms", "Form")
                        .WithMany("TbAuthorization")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TbAuthorization_TbForms");

                    b.Navigation("Form");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbExpensesPayment", b =>
                {
                    b.HasOne("Models.CustomModels.ApplicationUser", null)
                        .WithMany("TbExpensesPayment")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbExpenses", "Expense")
                        .WithMany("TbExpensesPayment")
                        .HasForeignKey("ExpenseId")
                        .HasConstraintName("FK_TbExpensesPayment_TbExpenses");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbSafes", "Safe")
                        .WithMany("TbExpensesPayment")
                        .HasForeignKey("SafeId")
                        .HasConstraintName("FK_TbExpensesPayment_TbSafes");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbShifts", "Sheft")
                        .WithMany("TbExpensesPayment")
                        .HasForeignKey("SheftId")
                        .HasConstraintName("FK_TbExpensesPayment_TbShifts");

                    b.Navigation("Expense");

                    b.Navigation("Safe");

                    b.Navigation("Sheft");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbGroups", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbItems", "Item")
                        .WithMany("TbGroups")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TbGroups_TbItems");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbItemProperties", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbGroups", "Group")
                        .WithMany("TbItemProperties")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TbProperties_TbGroups");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbItems", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbCategories", "Category")
                        .WithMany("TbItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TbProducts_TbCategories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbItemUnits", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbItems", "Item")
                        .WithMany("TbItemUnits")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("FK_TbProductUnits_TbProducts");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbUnits", "Unit")
                        .WithMany("TbItemUnits")
                        .HasForeignKey("UnitId")
                        .HasConstraintName("FK_TbProductUnits_TbUnits");

                    b.Navigation("Item");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPrinterSettings", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbCategories", "Category")
                        .WithMany("TbPrinterSettings")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_TbPrinterSettings_TbCategories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPurchaseInvoiceItems", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbPurchaseInvoices", "Invoice")
                        .WithMany("TbPurchaseInvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TbPurchaseInvoiceItems_TbPurchaseInvoices");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbItemUnits", "ItemUnit")
                        .WithMany("TbPurchaseInvoiceItems")
                        .HasForeignKey("ItemUnitId")
                        .IsRequired()
                        .HasConstraintName("FK_TbPurchaseInvoiceItems_TbItemUnits");

                    b.Navigation("Invoice");

                    b.Navigation("ItemUnit");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPurchaseInvoices", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbShifts", "Sheft")
                        .WithMany("TbPurchaseInvoices")
                        .HasForeignKey("SheftId")
                        .IsRequired()
                        .HasConstraintName("FK_TbPurchaseInvoices_TbShifts");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbStores", "Store")
                        .WithMany("TbPurchaseInvoices")
                        .HasForeignKey("StoreId")
                        .HasConstraintName("FK_TbPurchaseInvoices_TbStores");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbSuppliers", "Supplier")
                        .WithMany("TbPurchaseInvoices")
                        .HasForeignKey("SupplierId")
                        .IsRequired()
                        .HasConstraintName("FK_TbPurchaseInvoices_TbSuppliers");

                    b.Navigation("Sheft");

                    b.Navigation("Store");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPurchaseReturnsDitails", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbItemUnits", "ItemUnit")
                        .WithMany("TbPurchaseReturnsDitails")
                        .HasForeignKey("ItemUnitId")
                        .HasConstraintName("FK_TbPurchaseReturnsDitails_TbItemUnits");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbPurchasesReturns", "Return")
                        .WithMany("TbPurchaseReturnsDitails")
                        .HasForeignKey("ReturnId")
                        .HasConstraintName("FK_TbPurchaseReturnsDitails_TbPurchasesReturns");

                    b.Navigation("ItemUnit");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPurchasesReturns", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbPurchaseInvoices", "Inv")
                        .WithMany("TbPurchasesReturns")
                        .HasForeignKey("InvId")
                        .HasConstraintName("FK_TbPurchasesReturns_TbPurchaseInvoices");

                    b.Navigation("Inv");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSalesInvoiceItems", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbSalesInvoices", "Invoice")
                        .WithMany("TbSalesInvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_TbSalesInvoiceItems_TbSalesInvoices");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbItemUnits", "ItemUnit")
                        .WithMany("TbSalesInvoiceItems")
                        .HasForeignKey("ItemUnitId")
                        .HasConstraintName("FK_TbSalesInvoiceItems_TbItemUnits");

                    b.Navigation("Invoice");

                    b.Navigation("ItemUnit");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSalesInvoices", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbShifts", "Sheft")
                        .WithMany("TbSalesInvoices")
                        .HasForeignKey("SheftId")
                        .HasConstraintName("FK_TbSalesInvoices_TbShifts");

                    b.Navigation("Sheft");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSalesReturns", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbSalesInvoices", "Inv")
                        .WithMany("TbSalesReturns")
                        .HasForeignKey("InvId")
                        .HasConstraintName("FK_TbSalesReturns_TbSalesInvoices");

                    b.Navigation("Inv");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSalesReturnsDitails", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbItemUnits", "ItemUnit")
                        .WithMany("TbSalesReturnsDitails")
                        .HasForeignKey("ItemUnitId")
                        .HasConstraintName("FK_TbSalesReturnsDitails_TbItemUnits");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbSalesReturns", "Return")
                        .WithMany("TbSalesReturnsDitails")
                        .HasForeignKey("ReturnId")
                        .HasConstraintName("FK_TbSalesReturnsDitails_TbSalesReturns");

                    b.Navigation("ItemUnit");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbShifts", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbSafes", "Safe")
                        .WithMany("TbShifts")
                        .HasForeignKey("SafeId")
                        .HasConstraintName("FK_TbShifts_TbSafes");

                    b.Navigation("Safe");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbStockTransactions", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbSafes", "SafeFrom")
                        .WithMany("TbStockTransactionsSafeFrom")
                        .HasForeignKey("SafeFromId")
                        .HasConstraintName("FK_TbStockTransactions_TbSafes");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbSafes", "SafeTo")
                        .WithMany("TbStockTransactionsSafeTo")
                        .HasForeignKey("SafeToId")
                        .HasConstraintName("FK_TbStockTransactions_TbSafes1");

                    b.Navigation("SafeFrom");

                    b.Navigation("SafeTo");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbStockWithdrawAndDeposit", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbSafes", "Stock")
                        .WithMany("TbStockWithdrawAndDeposit")
                        .HasForeignKey("StockId")
                        .HasConstraintName("FK_TbStockWithdrawAndDeposit_TbSafes");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbStoresTransaction", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbStores", "IdStoreFromNavigation")
                        .WithMany("TbStoresTransactionIdStoreFromNavigation")
                        .HasForeignKey("IdStoreFrom")
                        .HasConstraintName("FK_TbStoresTransaction_TbStores");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbStores", "IdStoreToNavigation")
                        .WithMany("TbStoresTransactionIdStoreToNavigation")
                        .HasForeignKey("IdStoreTo")
                        .HasConstraintName("FK_TbStoresTransaction_TbStores1");

                    b.Navigation("IdStoreFromNavigation");

                    b.Navigation("IdStoreToNavigation");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbStoreTransactionDetails", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbItemUnits", "ItemUnit")
                        .WithMany("TbStoreTransactionDetails")
                        .HasForeignKey("ItemUnitId")
                        .HasConstraintName("FK_TbStoreTransactionDetails_TbItemUnits");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbStoresTransaction", "Transaction")
                        .WithMany("TbStoreTransactionDetails")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_TbStoreTransactionDetails_TbStoresTransaction");

                    b.Navigation("ItemUnit");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbTransaction", b =>
                {
                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbCustomers", "Cust")
                        .WithMany("TbTransaction")
                        .HasForeignKey("CustId")
                        .HasConstraintName("FK_TbTransaction_TbCustomers");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbSafes", "Safe")
                        .WithMany("TbTransaction")
                        .HasForeignKey("SafeId")
                        .HasConstraintName("FK_TbTransaction_TbSafes");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbSuppliers", "Supplier")
                        .WithMany("TbTransaction")
                        .HasForeignKey("SupplierId")
                        .HasConstraintName("FK_TbTransaction_TbSuppliers");

                    b.HasOne("Pharmacy_DomainModels.Models.DB_Models.TbTransactionTypes", "TransactionType")
                        .WithMany("TbTransaction")
                        .HasForeignKey("TransactionTypeId")
                        .HasConstraintName("FK_TbTransaction_TbTransactionTypes");

                    b.Navigation("Cust");

                    b.Navigation("Safe");

                    b.Navigation("Supplier");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("Models.CustomModels.ApplicationUser", b =>
                {
                    b.Navigation("TbExpensesPayment");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbCategories", b =>
                {
                    b.Navigation("TbItems");

                    b.Navigation("TbPrinterSettings");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbCustomers", b =>
                {
                    b.Navigation("TbTransaction");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbExpenses", b =>
                {
                    b.Navigation("TbExpensesPayment");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbForms", b =>
                {
                    b.Navigation("TbAuthorization");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbGroups", b =>
                {
                    b.Navigation("TbItemProperties");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbItems", b =>
                {
                    b.Navigation("TbGroups");

                    b.Navigation("TbItemUnits");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbItemUnits", b =>
                {
                    b.Navigation("TbPurchaseInvoiceItems");

                    b.Navigation("TbPurchaseReturnsDitails");

                    b.Navigation("TbSalesInvoiceItems");

                    b.Navigation("TbSalesReturnsDitails");

                    b.Navigation("TbStoreTransactionDetails");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPurchaseInvoices", b =>
                {
                    b.Navigation("TbPurchaseInvoiceItems");

                    b.Navigation("TbPurchasesReturns");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbPurchasesReturns", b =>
                {
                    b.Navigation("TbPurchaseReturnsDitails");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSafes", b =>
                {
                    b.Navigation("TbExpensesPayment");

                    b.Navigation("TbShifts");

                    b.Navigation("TbStockTransactionsSafeFrom");

                    b.Navigation("TbStockTransactionsSafeTo");

                    b.Navigation("TbStockWithdrawAndDeposit");

                    b.Navigation("TbTransaction");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSalesInvoices", b =>
                {
                    b.Navigation("TbSalesInvoiceItems");

                    b.Navigation("TbSalesReturns");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSalesReturns", b =>
                {
                    b.Navigation("TbSalesReturnsDitails");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbShifts", b =>
                {
                    b.Navigation("TbExpensesPayment");

                    b.Navigation("TbPurchaseInvoices");

                    b.Navigation("TbSalesInvoices");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbStores", b =>
                {
                    b.Navigation("TbPurchaseInvoices");

                    b.Navigation("TbStoresTransactionIdStoreFromNavigation");

                    b.Navigation("TbStoresTransactionIdStoreToNavigation");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbStoresTransaction", b =>
                {
                    b.Navigation("TbStoreTransactionDetails");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbSuppliers", b =>
                {
                    b.Navigation("TbPurchaseInvoices");

                    b.Navigation("TbTransaction");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbTransactionTypes", b =>
                {
                    b.Navigation("TbTransaction");
                });

            modelBuilder.Entity("Pharmacy_DomainModels.Models.DB_Models.TbUnits", b =>
                {
                    b.Navigation("TbItemUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
