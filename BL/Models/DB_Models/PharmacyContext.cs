// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using BL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Pharmacy_DomainModels.Models.DB_Models
{
    public partial class PharmacyContext : IdentityDbContext<ApplicationUser>
    {
        public PharmacyContext()
        {
        }

        public PharmacyContext(DbContextOptions<PharmacyContext> options)
            : base(options)
        {
        }

        public virtual DbSet<TbCategories> TbCategories { get; set; }
        public virtual DbSet<TbCustomers> TbCustomers { get; set; }
        public virtual DbSet<TbDelivryMen> TbDelivryMen { get; set; }
        public virtual DbSet<TbItemUnits> TbItemUnits { get; set; }
        public virtual DbSet<TbItems> TbItems { get; set; }
        public virtual DbSet<TbOrders> TbOrders { get; set; }
        public virtual DbSet<TbOrdersItems> TbOrdersItems { get; set; }
        public virtual DbSet<TbPrinterSettings> TbPrinterSettings { get; set; }
        public virtual DbSet<TbSalesInvoiceItems> TbSalesInvoiceItems { get; set; }
        public virtual DbSet<TbSalesInvoices> TbSalesInvoices { get; set; }
        public virtual DbSet<TbUnits> TbUnits { get; set; }
        public virtual DbSet<VwItemsWithUnits> VwItemsWithUnits { get; set; }
        public virtual DbSet<VwOrderHead> VwOrderHead { get; set; }
        public virtual DbSet<VwOrderItem> VwOrderItem { get; set; }
        public virtual DbSet<VwRoshetaBody> VwRoshetaBody { get; set; }
        public virtual DbSet<VwRoshetaHead> VwRoshetaHead { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer(ConnectionString.GetConnectionString());
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.Entity<TbCustomers>(entity =>
            {
                entity.Property(e => e.CreditLimit).HasDefaultValueSql("((0))");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<TbItemUnits>(entity =>
            {
                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.PuchasePrice).HasDefaultValueSql("((0))");

                entity.Property(e => e.SalesPrice).HasDefaultValueSql("((1))");

                entity.Property(e => e.UnitsNumber).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Item)
                    .WithMany(p => p.TbItemUnits)
                    .HasForeignKey(d => d.ItemId)
                    .HasConstraintName("FK_TbProductUnits_TbProducts");

                entity.HasOne(d => d.Unit)
                    .WithMany(p => p.TbItemUnits)
                    .HasForeignKey(d => d.UnitId)
                    .HasConstraintName("FK_TbProductUnits_TbUnits");
            });

            modelBuilder.Entity<TbItems>(entity =>
            {
                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.IsDeleted).HasDefaultValueSql("((0))");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.TbItems)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_TbProducts_TbCategories");
            });

            modelBuilder.Entity<TbOrders>(entity =>
            {
                entity.Property(e => e.BloodPressure).HasDefaultValueSql("('0/0')");

                entity.Property(e => e.Diagnosis).HasDefaultValueSql("(' ')");

                entity.Property(e => e.Notes).HasDefaultValueSql("(' ')");

                entity.Property(e => e.OrderType).HasDefaultValueSql("('2')");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.TbOrders)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_TbOrders_TbCustomers");
            });

            modelBuilder.Entity<TbOrdersItems>(entity =>
            {
                entity.Property(e => e.Notes).HasDefaultValueSql("(' ')");

                entity.Property(e => e.Price).HasDefaultValueSql("((0))");

                entity.Property(e => e.Qty).HasDefaultValueSql("((0))");

                entity.Property(e => e.Total).HasComputedColumnSql("([Price]*[Qty])", false);

                entity.HasOne(d => d.ItemUnit)
                    .WithMany(p => p.TbOrdersItems)
                    .HasForeignKey(d => d.ItemUnitId)
                    .HasConstraintName("FK_TbRoshetaItems_TbItemUnits");

                entity.HasOne(d => d.Order)
                    .WithMany(p => p.TbOrdersItems)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_TbRoshetaItems_TbRosheta");
            });

            modelBuilder.Entity<TbPrinterSettings>(entity =>
            {
                entity.HasOne(d => d.Category)
                    .WithMany(p => p.TbPrinterSettings)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK_TbPrinterSettings_TbCategories");
            });

            modelBuilder.Entity<TbSalesInvoiceItems>(entity =>
            {
                entity.Property(e => e.Discount).HasDefaultValueSql("((0))");

                entity.Property(e => e.Total).HasComputedColumnSql("([Qty]*[SalesPrice]-[Discount])", true);

                entity.HasOne(d => d.Invoice)
                    .WithMany(p => p.TbSalesInvoiceItems)
                    .HasForeignKey(d => d.InvoiceId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_TbSalesInvoiceItems_TbSalesInvoices");

                entity.HasOne(d => d.ItemUnit)
                    .WithMany(p => p.TbSalesInvoiceItems)
                    .HasForeignKey(d => d.ItemUnitId)
                    .HasConstraintName("FK_TbSalesInvoiceItems_TbItemUnits");
            });

            modelBuilder.Entity<TbSalesInvoices>(entity =>
            {
                entity.Property(e => e.Cash).HasDefaultValueSql("((0))");

                entity.Property(e => e.Discount).HasDefaultValueSql("((0))");

                entity.Property(e => e.Later).HasComputedColumnSql("([Total]-([Cash]+[Discount]))", false);

                entity.Property(e => e.StoreId).HasDefaultValueSql("((1))");

                entity.Property(e => e.Total).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<VwItemsWithUnits>(entity =>
            {
                entity.ToView("VwItemsWithUnits");
            });

            modelBuilder.Entity<VwOrderHead>(entity =>
            {
                entity.ToView("VwOrderHead");
            });

            modelBuilder.Entity<VwOrderItem>(entity =>
            {
                entity.ToView("VwOrderItem");
            });

            modelBuilder.Entity<VwRoshetaBody>(entity =>
            {
                entity.ToView("VwRoshetaBody");
            });

            modelBuilder.Entity<VwRoshetaHead>(entity =>
            {
                entity.ToView("VwRoshetaHead");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}